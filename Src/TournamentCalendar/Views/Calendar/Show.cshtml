@inject IConfiguration Configuration
@model TournamentCalendar.Models.Calendar.BrowseModel
@using System.Globalization
@using Microsoft.Extensions.Configuration
@using TournamentCalendar.Library
@using TournamentCalendar.Views
@using Calendar = TournamentCalendar.Controllers.Calendar
@{
    var googleConfig = new GoogleConfiguration();
    Configuration.Bind(nameof(GoogleConfiguration), googleConfig);
}
<div class="row">
    <div class="col">
        @if (Model is { IsFiltered: true, Count: 1 })
        {
            <h3 class="h3">
                Informationen<br />zum ausgewählten Turnier
            </h3>
            <p>
                <b>@Html.ActionLink("Alle aktuellen Turniere im Kalender anzeigen", nameof(Calendar.All), nameof(Calendar), null, new { @class = "link" })</b><br />
                (Sortierung und Filter bleiben erhalten)
            </p>
        }
        else
        {
            <p>
                @(Model.Count > 0 ? $"{Model.Count} Turniere sind im Kalender eingetragen (sortiert nach Datum):" : "Leider keine Turniere im Kalender gefunden.")
            </p>
        }
    </div>
    <div class="col d-none d-sm-block text-right">
        <img src="@Url.Content("~/images/turniere_annahme.jpg")" height="120" alt="Turniere" class="rounded float-end" />
    </div>
</div>
<div class="row">
    <div class="col-12 pb-4">
        @{ var partialModel = Model.DisplayModel.First();}
        @await Html.PartialAsync(ViewName.Calendar._ShowSingleEntry, partialModel)
    </div>
</div>
@section MetaSection {<meta name="robots" content="noindex, nofollow">}
@section ScriptStandardSection {
    <script src="@Url.Content(ScriptName.Js.Location)" asp-append-version="true"></script>
    <script>
        //<![CDATA[
        (async function() {
            await loadGoogleMaps({
                key: '@googleConfig.WebApiKey',
                language: 'de',
                region: 'DE'
            });
            await initMap();
        })();

        async function initMap() {
            @if (partialModel is { Latitude: not null, Longitude: not null })
            {
                <text>await ShowLocationOnGoogleMaps(@partialModel.Latitude.Value.ToString(CultureInfo.InvariantCulture), @partialModel.Longitude.Value.ToString(CultureInfo.InvariantCulture));</text>
            }
        }

        async function ShowLocationOnGoogleMaps(latitude, longitude) {
            const { Map: MapsLib } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerElement: MarkerLib } = await google.maps.importLibrary("marker");

            const coords = new google.maps.LatLng(latitude, longitude);
            const mapOptions = {
                zoom: 14,
                center: coords,
                mapId: '@(googleConfig.MapId)',
                mapTypeControl: true,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            //create the map, and place it in the HTML map div
            const map = new MapsLib(document.getElementById('mapPlaceholder'), mapOptions);

            //place the initial marker
            const marker = new MarkerLib({
                position: coords,
                map: map,
                title: 'Angegebener Standort',
                content: new google.maps.marker.PinElement({
                    background: '#d32f2f',
                    borderColor: '#b71c1c',
                    glyphColor: '#fff'
                }).element
            });
        }
        //]]>
    </script>
}
