@model TournamentCalendar.Models.Calendar.BrowseModel
@using TournamentCalendar.Controllers
@using TournamentCalendar.Views
<div class="row">
    <div class="col-md-6">
        <h3 class="h3">Turnierkalender</h3>
        <p>
            Auf dieser Seite erscheinen primär Volleyball-Turniere aus dem deutschsprachigen Raum.
        </p>
        <p>
            Wer möchte, wird mit <b>@Html.ActionLink("Volley-News", nameof(InfoService.Index), nameof(InfoService), null, new { @class = "link" })</b> per E-Mail über neue Einträge im Turnierkalender informiert.
        </p>
        <p>
            Findet ein Turnier statt, das hier nicht aufgeführt ist?
            <b>@Html.ActionLink("Gleich in den Kalender eintragen.", nameof(Calendar.Entry), nameof(Calendar), null, new { @class = "link" })</b>
        </p>
    </div>
    <div class="col-md-6 d-none d-md-block">
        @* Hide on devices smaller than MD *@
        <img src="@Url.Content("~/images/ball-crown.jpg")" class="rounded text-right" alt="Turniere" style="width: 100%" />
    </div>
    <div class="col-md-12">
    @if (Model.DisplayModel.Any())
    {
        var rec = Model.DisplayModel.Last();
        <label style="margin: 0 10px 10px 0; font-size: 1rem; display: inline-block">
                <strong>Filtern der Tabelle</strong><br />(z.B.: &quot;<b>.@rec.DateFrom.ToString("MM.yy")</b>&quot; für &quot;alle Turniere im @rec.DateFrom.ToString("MMMM")&quot; oder &quot;<b>@string.Join(string.Empty, rec.GetTournamentType().Take(5)).ToLower()</b>&quot; für @rec.GetTournamentType()-Turniere)
        </label>
    }
    </div>
    <div class="pb-2 table-responsive">
        <table id="tournaments-table" class="table table-striped table-bordered border-light table-hover rounded">
        <thead>
            <tr>
                <th>Datum</th>
                <th>Turniername</th>
                @*<th>Ausrichter</th>*@
                <th>Art</th>
                <th>Belag</th>
                <th>PLZ</th>
                <th class="text-center"><i class="bi bi-info-circle-fill"></i></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var m in Model.DisplayModel)
            {
                <tr id="@m.Id" title="Details zu &quot;@m.TournamentName&quot; - @m.Organizer">
                    <td>@m.DateFrom.ToString("dd.MM.yy")</td>
                    <td>@m.GetTournamentNameShort(60)</td>
                    @*<td>@m.GetOrganizerShort(20)</td>*@
                    <td>@m.GetTournamentTypeShort()</td>
                    <td>@m.GetSurface()</td>
                    <td>@m.CountryId-@m.PostalCode</td>
                    <td class="text-center"><a href="@Url.Action(nameof(Calendar.Id), nameof(Calendar), new {id = m.Id})" style="text-decoration: none" aria-label="@(m.TournamentName)"><i class="bi bi-info-circle @((DateTime.Now.Date - m.ModifiedOn.Date).Days < 2 ? "text-primary" : "")"></i></a></td>
                </tr>
            }
        </tbody>
    </table>
    <div class="small text-primary">Insgesamt @Model.DisplayModel.Count() Turniere im Kalender</div>
    </div>
</div>
@section MetaSection {
    <meta name="robots" content="index, follow">
    <link rel="canonical" href="@Url.Action(nameof(Calendar.All), nameof(Calendar))" />
}
@section CssSection {
    <link href="@Url.Content(CssName.Lib.SimpleDataTablesCss)" rel="stylesheet" />
    @* Styles used in wrappers inserted by simpleDatatables javaScript *@
    <style>
        .datatable-top {
            padding-left: 0 !important;
            padding-top: .25rem !important;
            padding-bottom: 1rem !important;
        }

        .datatable-search {
            float: left !important;
        }

        .datatable-container {
            border-bottom: 0 !important;
        }

        button.datatable-sorter {
            text-decoration: none !important;
        }

        .datatable-table > tbody > tr > td,
        .datatable-table > tbody > tr > th,
        .datatable-table > tfoot > tr > td,
        .datatable-table > tfoot > tr > th,
        .datatable-table > thead > tr > td,
        .datatable-table > thead > tr > th {
            padding: 8px 5px !important;
        }
    </style>
}
@section ScriptStandardSection {
<script src="@Url.Content(ScriptName.Lib.SimpleDataTablesJs)" asp-append-version="true"></script>
<script>
//<![CDATA[
    'use strict';
    document.addEventListener('DOMContentLoaded', OnDOMContentLoaded, false);
    function OnDOMContentLoaded() {
        const tournamentsTableElement = document.querySelector("#tournaments-table");
        const labelsEN = {
            placeholder: "Search...",
            searchTitle: "Search within table",
            perPage: "entries per page",
            noRows: "No entries found",
            info: "Showing {start} to {end} of {rows} entries",
            noResults: "No results match your search query"
        };
        const labelsDE = {
            placeholder: "Tabelle filtern...",
            searchTitle: "Begriff(e) zum Filtern der Tabelle",
            perPage: "Einträge pro Seite",
            noRows: "Keine Einträge gefunden",
            info: "Anzeige von {start} bis {end} von {rows} Einträgen",
            noResults: "Keine Einträge für die Suchbegriffe gefunden"
        };
        const options = {
            searchable: true,
            sortable: true,
            paging: false,
            fixedColumns: true,
            columns: [
                {
                    select: 0,
                    type: 'date',
                    format: 'DD.MM.YY'
                },
                {
                    select: 5,
                    sortable: false
                }
            ],
            labels: labelsDE,
            classes: {
                input: 'form-control',
                sorter: 'datatable-sorter btn btn-link btn-sm p-0 m-0'
            } 
        }
        const tournamentsTable = new window.simpleDatatables.DataTable(tournamentsTableElement, options);
        tournamentsTable.columns.sort(0, 'asc');
        makeRowsClickable();
        tournamentsTable.on('datatable.update', makeRowsClickable);
        calcDistance();
        
        function makeRowsClickable()
        {
            // Make each table row clickable
            [].forEach.call(document.querySelectorAll('#tournaments-table td a'), function (el) {
                const row = el.closest('tr');
                row.style.cursor = 'pointer';
                row.addEventListener('click', function (event) {
                    const link = this.querySelector('td a');
                    if (!link) return;
                    window.location = link.href;
                });
            });
        }

        function calcDistance() {
                const locList = @Html.Raw(Json.Serialize(Model.DisplayModel.Select(m => new { m.Id, lat = m.Latitude, lon = m.Longitude })));

                // Augsburg
                const lat1 = 48.37153888888889;
                const lon1 = 10.898511111111112;

                const idDistList = locList.map(loc => {
                    const d = haversineDistance(lat1, lon1, loc.lat, loc.lon);
                    return { id: loc.id, distance: Math.round(d) };
                });

                for (const idDist of idDistList) {
                    const element = document.getElementById(idDist.id).lastElementChild;
                    if (element) {
                        element.innerText = idDist.distance;
                    }
                }
                

                
        }
    }

    



    function haversineDistance(lat1, lon1, lat2, lon2, unit = 'K') {
        const radius = 6371; // Earth's radius in kilometers
        const dLat = (lat2 - lat1) * (Math.PI / 180);
        const dLon = (lon2 - lon1) * (Math.PI / 180);
        const a =
            Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos((lat1 * Math.PI) / 180) *
                Math.cos((lat2 * Math.PI) / 180) *
                Math.sin(dLon / 2) *
                Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        const distance = radius * c;

        if (unit === 'M') {
            return distance * 0.621371; // Convert to miles
        } else if (unit === 'N') {
            return distance * 0.539957; // Convert to nautical miles
        }
        return distance; // Kilometers by default
    }

    // const distanceKm = haversineDistance(40.774102, -73.971734, 40.771209, -73.9673991);
    // console.log(`Distance: ${distanceKm} km`);

//]]>
</script>
}
