@inject UserLocationService UserLocation
@model TournamentCalendar.Models.Calendar.BrowseModel
@using TournamentCalendar.Controllers
@using TournamentCalendar.Services
<div class="row">
    <div class="col-md-6 mb-2">
        <h3 class="h3">@ViewBag.TitleTagText</h3>
        <p>
            Auf dieser Seite erscheinen primär Volleyball-Turniere aus dem deutschsprachigen Raum.
        </p>
        <p>
            Wer möchte, wird mit <b>@Html.ActionLink("Volley-News", nameof(InfoService.Index), nameof(InfoService), null, new { @class = "link" })</b> per E-Mail über neue Einträge im Turnierkalender informiert.
        </p>
        <p class="mb-0">
            Findet ein Turnier statt, das hier nicht aufgeführt ist?
            <b>@Html.ActionLink("Gleich in den Kalender eintragen.", nameof(Calendar.Entry), nameof(Calendar), null, new { @class = "link" })</b>
        </p>
    </div>
    <div class="col-md-6 d-none d-md-block">
        @* Hide on devices smaller than MD *@
        <img src="@Url.Content("~/images/ball-crown.jpg")" class="rounded text-right" alt="Turniere" style="width: 100%" />
    </div>
    <div class="col-12 text-end text-nowrap">
        @if (!UserLocation.GetLocation().IsSet)
        {
            <a asp-action="@nameof(GeoLocation.Index)" asp-controller="@nameof(GeoLocation)" class="d-inline-block mb-2"><b><span class="bi bi-square text-danger"> Entfernungen anzeigen</span></b></a>
        }
    </div>

    <div class="row col-12 col-md-6">
        <div class="input-group mb-2">
            <input type="text" id="search-input" placeholder="Filterbegriffe" class="form-control border-secondary-subtle" />
            <button class="btn border-secondary-subtle p-0 ps-2 pe-2" type="button" id="clear-search-input">
                <i class=" bi bi-backspace" style="font-size:1.5em"></i>
            </button>
                <button class="btn border-0 p-0 ps-2 pe-2" type="button" data-bs-toggle="collapse" data-bs-target="#filter-info" aria-expanded="false" aria-controls="filter-info">
                <i class="bi bi-info-circle text-primary" style="font-size:1.5em"></i>
            </button>
        </div>
    </div>
    <div class="collapse mb-2" id="filter-info">
        <div class="card card-body bg-secondary bg-opacity-10 pt-1 pb-2">@{ var now = DateTime.Now.AddMonths(2); }
            <span class="d-inline-block">Begriffe zum Filtern der Liste, mit Leerzeichen getrennt. Alle Begriffe müssen vorhanden sein. Z.B.:</span>
            <span class="d-inline-block"><b>mixed</b> = &quot;Mixed&quot;-Turniere<br /></span>
            <span class="d-inline-block"><b>halle .@now.ToString("MM.yy")</b> = Hallenturniere im @now.ToString("MMMM yyyy")</span>
        </div>
    </div>
    <div class="pb-2 table-responsive">
        <table id="tournaments-table" class="table table-striped table-bordered border-light table-hover rounded">
            <thead>
            <tr>
                <th data-type="date" data-order="1" class="sortable asc">Datum</th>
                <th data-type="string" class="sortable none">Turniername</th>
                @*<th>Ausrichter</th>*@
                <th data-type="string" class="sortable none">Art</th>
                <th data-type="string" class="sortable none">Belag</th>
                <th data-type="string" class="sortable none">PLZ</th>
                <th data-type="number" class="sortable none">km&nbsp;&nbsp;</th>
                <th class="text-center"><i class="bi bi-info-circle"></i></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var m in Model.DisplayModel)  
            {  
               var distance = m.GetDistanceToVenue();  
               var distanceStyle = distance < 150 ? "font-weight:bold" : "";  
               var detailsUrl = Url.Action(nameof(Calendar.Id), nameof(Calendar), new { id = m.Id });
                    <tr id="@m.Id" title="Details zu &quot;@m.TournamentName&quot; - @m.Organizer" onclick="window.location='@detailsUrl'" onkeypress="window.location='@detailsUrl'" style="cursor: pointer;">
                        <td>@m.DateFrom.ToString("dd.MM.yy")</td>  
                   <td>@m.GetTournamentNameShort(60)</td>  
                   @*<td>@m.GetOrganizerShort(20)</td>*@  
                   <td>@m.GetTournamentTypeShort()</td>  
                   <td>@m.GetSurface()</td>  
                   <td>@m.CountryId-@m.PostalCode</td>  
                   <td style="@(distanceStyle)">@distance</td>  
                   <td class="text-center"><a href="@detailsUrl" style="text-decoration: none" aria-label="@(m.TournamentName)"><i class="bi bi-info-circle @((DateTime.Now.Date - m.ModifiedOn.Date).Days < 2 ? "text-primary" : "")"></i></a></td>  
               </tr>  
            }
            </tbody>
        </table>
        @if (!Model.DisplayModel.Any())
        {
            <div class="text-center">
                Keine Einträge im Turnierkalender gefunden.
            </div>
        }
        <div id="no-matches" class="text-center" style="display:none">
            Keine Einträge für die Suchbegriffe gefunden.
        </div>
        <div class="small text-primary">Insgesamt @Model.DisplayModel.Count() Turniere im Kalender</div>
    </div>
</div>
@section MetaSection {
    <meta name="robots" content="index, follow">
    <link rel="canonical" href="@Url.Action(nameof(Calendar.All), nameof(Calendar))" />
}
@section CssSection {
    <style>
        /* Base style for sortable headers */
        .sortable {
            cursor: pointer;
            position: relative;
            padding-right: 20px; /* Space for the sorting icon */
        }

            /* Ascending sort indicator */
            .sortable.asc::after {
                content: '▲';
                position: absolute;
                right: 5px;
                font-size: 0.8em;
            }

            /* Descending sort indicator */
            .sortable.desc::after {
                content: '▼';
                position: absolute;
                right: 5px;
                font-size: 0.8em;
            }

            /* No sort indicator */
            .sortable.none::after {
                content: '⇳';
                position: absolute;
                right: 5px;
                bottom: 7px;
                font-size: 1.2em;
                font-weight: 100;
            }
    </style>
}
@section ScriptStandardSection {
    <script>
        //<![CDATA[
        'use strict';

        document.addEventListener('DOMContentLoaded', OnDOMContentLoaded, false);

        function OnDOMContentLoaded() {
            const table = document.querySelector('#tournaments-table');
            const headers = table.querySelectorAll('th[data-type]');
            const searchInput = document.querySelector('#search-input');
            const clearSearchInputButton = document.querySelector('#clear-search-input');

            @if (Model.IsGeoSpacial())
            {
                <text>toggleColumn(table, 5, true);</text>
            }
            else
            {
                <text>toggleColumn(table, 5, false);</text>
            }

            headers.forEach(header => {
                header.addEventListener('click', () => {
                    const column = Array.from(header.parentNode.children).indexOf(header);
                    headers.forEach(h => {  
                       if (h !== header) {  
                           delete h.dataset.order;  
                       }  
                    });  
                    const order = header.dataset.order = -(header.dataset.order || -1);
                    const type = header.dataset.type;
                    sortTable(table, column, order, type);
                    updateSortIndicators(headers, header, order);
                    setSortOrderCookie(column, order);
                });
            });

            searchInput.addEventListener('input', () => {
                filterTable(table, searchInput.value);
                setSearchQueryCookie(searchInput.value);
            });

            clearSearchInputButton.addEventListener('click', () => {
                searchInput.value = '';
                filterTable(table, '');
                setSearchQueryCookie('');
            });

            // Apply sorting from cookie
            const sortedColumn = getSessionCookie('sortedColumn');
            const sortOrder = getSessionCookie('sortOrder');
            if (sortedColumn !== null && sortOrder !== null) {
                const header = headers[sortedColumn];
                const order = parseInt(sortOrder, 10);
                header.dataset.order = order;
                const type = header.dataset.type;
                sortTable(table, sortedColumn, order, type);
                updateSortIndicators(headers, header, order);
            }

            // Apply search query from cookie
            const searchQuery = getSessionCookie('searchQuery');
            if (searchQuery !== null) {
                searchInput.value = decodeURIComponent(searchQuery);
                filterTable(table, searchInput.value);
            }
        }

        function sortTable(table, column, order, type) {
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));

            rows.sort((a, b) => {
                const textA = a.children[column].innerText;
                const textB = b.children[column].innerText;

                switch (type) {
                    case 'number':
                        return order * (parseFloat(textA) - parseFloat(textB));
                    case 'date':
                        return order * (parseDate(textA) - parseDate(textB));
                    case 'string':
                    default:
                        return order * textA.localeCompare(textB);
                }
            });

            rows.forEach(row => tbody.appendChild(row));
        }

        function parseDate(dateString) {
            const [day, month, year] = dateString.split('.').map(Number);
            return new Date(year, month - 1, day);
        }

        function filterTable(table, query) {
            const noMatches = document.getElementById('no-matches');
            const rows = table.querySelectorAll('tbody > tr');
            let matchesFound = false;

            if (query.trim() === '') {
                rows.forEach(row => {
                    row.style.display = 'table-row';
                });
                noMatches.style.display = 'none';
                return;
            }

            const terms = query.toLowerCase().split(' ').filter(term => term.trim() !== '');

            rows.forEach(row => {
                const cells = Array.from(row.children).filter((_, index) => index !== 5);
                // Apply terms as AND condition
                const matches = terms.every(term => cells.some(cell => cell.innerText.toLowerCase().includes(term)));
                row.style.display = matches ? 'table-row' : 'none';
                if (matches) matchesFound = true;
            });
            noMatches.style.display = matchesFound ? 'none' : 'block';
        }

        function toggleColumn(table, columnIndex, show) {
            const rows = table.querySelectorAll('tr');
            rows.forEach(row => {
                const cell = row.children[columnIndex];
                if (cell) {
                    cell.style.display = show ? 'table-cell' : 'none';
                }
            });
        }

        function updateSortIndicators(headers, activeHeader, order) {
            headers.forEach(header => {
                header.classList.remove('asc', 'desc', 'none');
                header.classList.add('none');
            });
            activeHeader.classList.remove('none');
            activeHeader.classList.add(order === 1 ? 'asc' : 'desc');
        }

        function setSortOrderCookie(column, order) {
            document.cookie = `sortedColumn=${column}; path=/`;
            document.cookie = `sortOrder=${order}; path=/`;
        }

        function setSearchQueryCookie(query) {
            document.cookie = `searchQuery=${encodeURIComponent(query)}; path=/`;
        }

        function getSessionCookie(cookieName) {
            const name = cookieName + "=";
            const decodedCookie = decodeURIComponent(document.cookie);
            const ca = decodedCookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) === 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return null;
        }
        //]]>
    </script>
}