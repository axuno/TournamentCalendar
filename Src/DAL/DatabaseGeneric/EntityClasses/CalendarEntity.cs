//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.11.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TournamentCalendarDAL.HelperClasses;
using TournamentCalendarDAL.FactoryClasses;
using TournamentCalendarDAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TournamentCalendarDAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Calendar'.<br/><br/></summary>
	[Serializable]
	public partial class CalendarEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private CountryEntity _country;
		private PlayingAbilityEntity _tournamentPlayingAbilityFrom;
		private PlayingAbilityEntity _tournamentPlayingAbilityTo;
		private SurfaceEntity _tournamentSurface;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static CalendarEntityStaticMetaData _staticMetaData = new CalendarEntityStaticMetaData();
		private static CalendarRelations _relationsFactory = new CalendarRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Country</summary>
			public static readonly string Country = "Country";
			/// <summary>Member name TournamentPlayingAbilityFrom</summary>
			public static readonly string TournamentPlayingAbilityFrom = "TournamentPlayingAbilityFrom";
			/// <summary>Member name TournamentPlayingAbilityTo</summary>
			public static readonly string TournamentPlayingAbilityTo = "TournamentPlayingAbilityTo";
			/// <summary>Member name TournamentSurface</summary>
			public static readonly string TournamentSurface = "TournamentSurface";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CalendarEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CalendarEntityStaticMetaData()
			{
				SetEntityCoreInfo("CalendarEntity", InheritanceHierarchyType.None, false, (int)TournamentCalendarDAL.EntityType.CalendarEntity, typeof(CalendarEntity), typeof(CalendarEntityFactory), false);
				AddNavigatorMetaData<CalendarEntity, CountryEntity>("Country", "TournamentCalendars", (a, b) => a._country = b, a => a._country, (a, b) => a.Country = b, TournamentCalendarDAL.RelationClasses.StaticCalendarRelations.CountryEntityUsingCountryIdStatic, ()=>new CalendarRelations().CountryEntityUsingCountryId, null, new int[] { (int)CalendarFieldIndex.CountryId }, null, true, (int)TournamentCalendarDAL.EntityType.CountryEntity);
				AddNavigatorMetaData<CalendarEntity, PlayingAbilityEntity>("TournamentPlayingAbilityFrom", "TournamentCalendars", (a, b) => a._tournamentPlayingAbilityFrom = b, a => a._tournamentPlayingAbilityFrom, (a, b) => a.TournamentPlayingAbilityFrom = b, TournamentCalendarDAL.RelationClasses.StaticCalendarRelations.PlayingAbilityEntityUsingPlayingAbilityFromStatic, ()=>new CalendarRelations().PlayingAbilityEntityUsingPlayingAbilityFrom, null, new int[] { (int)CalendarFieldIndex.PlayingAbilityFrom }, null, true, (int)TournamentCalendarDAL.EntityType.PlayingAbilityEntity);
				AddNavigatorMetaData<CalendarEntity, PlayingAbilityEntity>("TournamentPlayingAbilityTo", "TournamentCalendars_", (a, b) => a._tournamentPlayingAbilityTo = b, a => a._tournamentPlayingAbilityTo, (a, b) => a.TournamentPlayingAbilityTo = b, TournamentCalendarDAL.RelationClasses.StaticCalendarRelations.PlayingAbilityEntityUsingPlayingAbilityToStatic, ()=>new CalendarRelations().PlayingAbilityEntityUsingPlayingAbilityTo, null, new int[] { (int)CalendarFieldIndex.PlayingAbilityTo }, null, true, (int)TournamentCalendarDAL.EntityType.PlayingAbilityEntity);
				AddNavigatorMetaData<CalendarEntity, SurfaceEntity>("TournamentSurface", "TournamentCalendars", (a, b) => a._tournamentSurface = b, a => a._tournamentSurface, (a, b) => a.TournamentSurface = b, TournamentCalendarDAL.RelationClasses.StaticCalendarRelations.SurfaceEntityUsingSurfaceStatic, ()=>new CalendarRelations().SurfaceEntityUsingSurface, null, new int[] { (int)CalendarFieldIndex.Surface }, null, true, (int)TournamentCalendarDAL.EntityType.SurfaceEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CalendarEntity()
		{
		}

		/// <summary> CTor</summary>
		public CalendarEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CalendarEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CalendarEntity</param>
		public CalendarEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Calendar which data should be fetched into this Calendar object</param>
		public CalendarEntity(System.Int64 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Calendar which data should be fetched into this Calendar object</param>
		/// <param name="validator">The custom validator object for this CalendarEntity</param>
		public CalendarEntity(System.Int64 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CalendarEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Country' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCountry() { return CreateRelationInfoForNavigator("Country"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'PlayingAbility' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTournamentPlayingAbilityFrom() { return CreateRelationInfoForNavigator("TournamentPlayingAbilityFrom"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'PlayingAbility' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTournamentPlayingAbilityTo() { return CreateRelationInfoForNavigator("TournamentPlayingAbilityTo"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Surface' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTournamentSurface() { return CreateRelationInfoForNavigator("TournamentSurface"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CalendarEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CalendarRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Country' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCountry { get { return _staticMetaData.GetPrefetchPathElement("Country", CommonEntityBase.CreateEntityCollection<CountryEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PlayingAbility' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTournamentPlayingAbilityFrom { get { return _staticMetaData.GetPrefetchPathElement("TournamentPlayingAbilityFrom", CommonEntityBase.CreateEntityCollection<PlayingAbilityEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PlayingAbility' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTournamentPlayingAbilityTo { get { return _staticMetaData.GetPrefetchPathElement("TournamentPlayingAbilityTo", CommonEntityBase.CreateEntityCollection<PlayingAbilityEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Surface' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTournamentSurface { get { return _staticMetaData.GetPrefetchPathElement("TournamentSurface", CommonEntityBase.CreateEntityCollection<SurfaceEntity>()); } }

		/// <summary>The ApprovedOn property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."ApprovedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> ApprovedOn
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CalendarFieldIndex.ApprovedOn, false); }
			set { SetValue((int)CalendarFieldIndex.ApprovedOn, value); }
		}

		/// <summary>The AttachmentFile property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."AttachmentFile".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 512.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AttachmentFile
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.AttachmentFile, true); }
			set { SetValue((int)CalendarFieldIndex.AttachmentFile, value); }
		}

		/// <summary>The Bond property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Bond".<br/>Table field type characteristics (type, precision, scale, length): Decimal, 5, 2, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal Bond
		{
			get { return (System.Decimal)GetValue((int)CalendarFieldIndex.Bond, true); }
			set { SetValue((int)CalendarFieldIndex.Bond, value); }
		}

		/// <summary>The City property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."City".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String City
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.City, true); }
			set { SetValue((int)CalendarFieldIndex.City, value); }
		}

		/// <summary>The ClosingDate property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."ClosingDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ClosingDate
		{
			get { return (System.DateTime)GetValue((int)CalendarFieldIndex.ClosingDate, true); }
			set { SetValue((int)CalendarFieldIndex.ClosingDate, value); }
		}

		/// <summary>The ContactAddress property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."ContactAddress".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 1024.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ContactAddress
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.ContactAddress, true); }
			set { SetValue((int)CalendarFieldIndex.ContactAddress, value); }
		}

		/// <summary>The CountryId property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."CountryId".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String CountryId
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.CountryId, true); }
			set { SetValue((int)CalendarFieldIndex.CountryId, value); }
		}

		/// <summary>The CreatedByUser property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."CreatedByUser".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String CreatedByUser
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.CreatedByUser, true); }
			set { SetValue((int)CalendarFieldIndex.CreatedByUser, value); }
		}

		/// <summary>The CreatedOn property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."CreatedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreatedOn
		{
			get { return (System.DateTime)GetValue((int)CalendarFieldIndex.CreatedOn, true); }
			set { SetValue((int)CalendarFieldIndex.CreatedOn, value); }
		}

		/// <summary>The DateFrom property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."DateFrom".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DateFrom
		{
			get { return (System.DateTime)GetValue((int)CalendarFieldIndex.DateFrom, true); }
			set { SetValue((int)CalendarFieldIndex.DateFrom, value); }
		}

		/// <summary>The DateTo property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."DateTo".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DateTo
		{
			get { return (System.DateTime)GetValue((int)CalendarFieldIndex.DateTo, true); }
			set { SetValue((int)CalendarFieldIndex.DateTo, value); }
		}

		/// <summary>The DeletedOn property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."DeletedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> DeletedOn
		{
			get { return (Nullable<System.DateTime>)GetValue((int)CalendarFieldIndex.DeletedOn, false); }
			set { SetValue((int)CalendarFieldIndex.DeletedOn, value); }
		}

		/// <summary>The Email property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Email".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Email
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.Email, true); }
			set { SetValue((int)CalendarFieldIndex.Email, value); }
		}

		/// <summary>The EntryFee property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."EntryFee".<br/>Table field type characteristics (type, precision, scale, length): Decimal, 5, 2, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal EntryFee
		{
			get { return (System.Decimal)GetValue((int)CalendarFieldIndex.EntryFee, true); }
			set { SetValue((int)CalendarFieldIndex.EntryFee, value); }
		}

		/// <summary>The Guid property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Guid".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Guid
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.Guid, true); }
			set { SetValue((int)CalendarFieldIndex.Guid, value); }
		}

		/// <summary>The Id property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Id".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int64 Id
		{
			get { return (System.Int64)GetValue((int)CalendarFieldIndex.Id, true); }
			set { SetValue((int)CalendarFieldIndex.Id, value); }
		}

		/// <summary>The Info property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Info".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 1024.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Info
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.Info, true); }
			set { SetValue((int)CalendarFieldIndex.Info, value); }
		}

		/// <summary>The IsMinPlayersFemale property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."IsMinPlayersFemale".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsMinPlayersFemale
		{
			get { return (System.Boolean)GetValue((int)CalendarFieldIndex.IsMinPlayersFemale, true); }
			set { SetValue((int)CalendarFieldIndex.IsMinPlayersFemale, value); }
		}

		/// <summary>The IsMinPlayersMale property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."IsMinPlayersMale".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsMinPlayersMale
		{
			get { return (System.Boolean)GetValue((int)CalendarFieldIndex.IsMinPlayersMale, true); }
			set { SetValue((int)CalendarFieldIndex.IsMinPlayersMale, value); }
		}

		/// <summary>The Latitude property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Latitude".<br/>Table field type characteristics (type, precision, scale, length): Float, 38, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Double> Latitude
		{
			get { return (Nullable<System.Double>)GetValue((int)CalendarFieldIndex.Latitude, false); }
			set { SetValue((int)CalendarFieldIndex.Latitude, value); }
		}

		/// <summary>The Longitude property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Longitude".<br/>Table field type characteristics (type, precision, scale, length): Float, 38, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Double> Longitude
		{
			get { return (Nullable<System.Double>)GetValue((int)CalendarFieldIndex.Longitude, false); }
			set { SetValue((int)CalendarFieldIndex.Longitude, value); }
		}

		/// <summary>The ModifiedOn property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."ModifiedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedOn
		{
			get { return (System.DateTime)GetValue((int)CalendarFieldIndex.ModifiedOn, true); }
			set { SetValue((int)CalendarFieldIndex.ModifiedOn, value); }
		}

		/// <summary>The NumOfTeams property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."NumOfTeams".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 NumOfTeams
		{
			get { return (System.Int32)GetValue((int)CalendarFieldIndex.NumOfTeams, true); }
			set { SetValue((int)CalendarFieldIndex.NumOfTeams, value); }
		}

		/// <summary>The NumPlayersFemale property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."NumPlayersFemale".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 NumPlayersFemale
		{
			get { return (System.Int32)GetValue((int)CalendarFieldIndex.NumPlayersFemale, true); }
			set { SetValue((int)CalendarFieldIndex.NumPlayersFemale, value); }
		}

		/// <summary>The NumPlayersMale property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."NumPlayersMale".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 NumPlayersMale
		{
			get { return (System.Int32)GetValue((int)CalendarFieldIndex.NumPlayersMale, true); }
			set { SetValue((int)CalendarFieldIndex.NumPlayersMale, value); }
		}

		/// <summary>The Organizer property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Organizer".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Organizer
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.Organizer, true); }
			set { SetValue((int)CalendarFieldIndex.Organizer, value); }
		}

		/// <summary>The PlayingAbilityFrom property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."PlayingAbilityFrom".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 PlayingAbilityFrom
		{
			get { return (System.Int64)GetValue((int)CalendarFieldIndex.PlayingAbilityFrom, true); }
			set { SetValue((int)CalendarFieldIndex.PlayingAbilityFrom, value); }
		}

		/// <summary>The PlayingAbilityTo property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."PlayingAbilityTo".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 PlayingAbilityTo
		{
			get { return (System.Int64)GetValue((int)CalendarFieldIndex.PlayingAbilityTo, true); }
			set { SetValue((int)CalendarFieldIndex.PlayingAbilityTo, value); }
		}

		/// <summary>The PostalCode property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."PostalCode".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 10.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PostalCode
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.PostalCode, true); }
			set { SetValue((int)CalendarFieldIndex.PostalCode, value); }
		}

		/// <summary>The PostedByEmail property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."PostedByEmail".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PostedByEmail
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.PostedByEmail, true); }
			set { SetValue((int)CalendarFieldIndex.PostedByEmail, value); }
		}

		/// <summary>The PostedByName property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."PostedByName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PostedByName
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.PostedByName, true); }
			set { SetValue((int)CalendarFieldIndex.PostedByName, value); }
		}

		/// <summary>The PostedByPassword property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."PostedByPassword".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 64.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PostedByPassword
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.PostedByPassword, true); }
			set { SetValue((int)CalendarFieldIndex.PostedByPassword, value); }
		}

		/// <summary>The Special property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Special".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 512.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Special
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.Special, true); }
			set { SetValue((int)CalendarFieldIndex.Special, value); }
		}

		/// <summary>The Street property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Street".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Street
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.Street, true); }
			set { SetValue((int)CalendarFieldIndex.Street, value); }
		}

		/// <summary>The Surface property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Surface".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 Surface
		{
			get { return (System.Int64)GetValue((int)CalendarFieldIndex.Surface, true); }
			set { SetValue((int)CalendarFieldIndex.Surface, value); }
		}

		/// <summary>The TournamentName property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."TournamentName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String TournamentName
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.TournamentName, true); }
			set { SetValue((int)CalendarFieldIndex.TournamentName, value); }
		}

		/// <summary>The Venue property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Venue".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Venue
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.Venue, true); }
			set { SetValue((int)CalendarFieldIndex.Venue, value); }
		}

		/// <summary>The Website property of the Entity Calendar<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Calendar"."Website".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Website
		{
			get { return (System.String)GetValue((int)CalendarFieldIndex.Website, true); }
			set { SetValue((int)CalendarFieldIndex.Website, value); }
		}

		/// <summary>Gets / sets related entity of type 'CountryEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CountryEntity Country
		{
			get { return _country; }
			set { SetSingleRelatedEntityNavigator(value, "Country"); }
		}

		/// <summary>Gets / sets related entity of type 'PlayingAbilityEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual PlayingAbilityEntity TournamentPlayingAbilityFrom
		{
			get { return _tournamentPlayingAbilityFrom; }
			set { SetSingleRelatedEntityNavigator(value, "TournamentPlayingAbilityFrom"); }
		}

		/// <summary>Gets / sets related entity of type 'PlayingAbilityEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual PlayingAbilityEntity TournamentPlayingAbilityTo
		{
			get { return _tournamentPlayingAbilityTo; }
			set { SetSingleRelatedEntityNavigator(value, "TournamentPlayingAbilityTo"); }
		}

		/// <summary>Gets / sets related entity of type 'SurfaceEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual SurfaceEntity TournamentSurface
		{
			get { return _tournamentSurface; }
			set { SetSingleRelatedEntityNavigator(value, "TournamentSurface"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace TournamentCalendarDAL
{
	public enum CalendarFieldIndex
	{
		///<summary>ApprovedOn. </summary>
		ApprovedOn,
		///<summary>AttachmentFile. </summary>
		AttachmentFile,
		///<summary>Bond. </summary>
		Bond,
		///<summary>City. </summary>
		City,
		///<summary>ClosingDate. </summary>
		ClosingDate,
		///<summary>ContactAddress. </summary>
		ContactAddress,
		///<summary>CountryId. </summary>
		CountryId,
		///<summary>CreatedByUser. </summary>
		CreatedByUser,
		///<summary>CreatedOn. </summary>
		CreatedOn,
		///<summary>DateFrom. </summary>
		DateFrom,
		///<summary>DateTo. </summary>
		DateTo,
		///<summary>DeletedOn. </summary>
		DeletedOn,
		///<summary>Email. </summary>
		Email,
		///<summary>EntryFee. </summary>
		EntryFee,
		///<summary>Guid. </summary>
		Guid,
		///<summary>Id. </summary>
		Id,
		///<summary>Info. </summary>
		Info,
		///<summary>IsMinPlayersFemale. </summary>
		IsMinPlayersFemale,
		///<summary>IsMinPlayersMale. </summary>
		IsMinPlayersMale,
		///<summary>Latitude. </summary>
		Latitude,
		///<summary>Longitude. </summary>
		Longitude,
		///<summary>ModifiedOn. </summary>
		ModifiedOn,
		///<summary>NumOfTeams. </summary>
		NumOfTeams,
		///<summary>NumPlayersFemale. </summary>
		NumPlayersFemale,
		///<summary>NumPlayersMale. </summary>
		NumPlayersMale,
		///<summary>Organizer. </summary>
		Organizer,
		///<summary>PlayingAbilityFrom. </summary>
		PlayingAbilityFrom,
		///<summary>PlayingAbilityTo. </summary>
		PlayingAbilityTo,
		///<summary>PostalCode. </summary>
		PostalCode,
		///<summary>PostedByEmail. </summary>
		PostedByEmail,
		///<summary>PostedByName. </summary>
		PostedByName,
		///<summary>PostedByPassword. </summary>
		PostedByPassword,
		///<summary>Special. </summary>
		Special,
		///<summary>Street. </summary>
		Street,
		///<summary>Surface. </summary>
		Surface,
		///<summary>TournamentName. </summary>
		TournamentName,
		///<summary>Venue. </summary>
		Venue,
		///<summary>Website. </summary>
		Website,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace TournamentCalendarDAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Calendar. </summary>
	public partial class CalendarRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between CalendarEntity and CountryEntity over the m:1 relation they have, using the relation between the fields: Calendar.CountryId - Country.Id</summary>
		public virtual IEntityRelation CountryEntityUsingCountryId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Country", false, new[] { CountryFields.Id, CalendarFields.CountryId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CalendarEntity and PlayingAbilityEntity over the m:1 relation they have, using the relation between the fields: Calendar.PlayingAbilityFrom - PlayingAbility.Strength</summary>
		public virtual IEntityRelation PlayingAbilityEntityUsingPlayingAbilityFrom
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "TournamentPlayingAbilityFrom", false, new[] { PlayingAbilityFields.Strength, CalendarFields.PlayingAbilityFrom }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CalendarEntity and PlayingAbilityEntity over the m:1 relation they have, using the relation between the fields: Calendar.PlayingAbilityTo - PlayingAbility.Strength</summary>
		public virtual IEntityRelation PlayingAbilityEntityUsingPlayingAbilityTo
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "TournamentPlayingAbilityTo", false, new[] { PlayingAbilityFields.Strength, CalendarFields.PlayingAbilityTo }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CalendarEntity and SurfaceEntity over the m:1 relation they have, using the relation between the fields: Calendar.Surface - Surface.Id</summary>
		public virtual IEntityRelation SurfaceEntityUsingSurface
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "TournamentSurface", false, new[] { SurfaceFields.Id, CalendarFields.Surface }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCalendarRelations
	{
		internal static readonly IEntityRelation CountryEntityUsingCountryIdStatic = new CalendarRelations().CountryEntityUsingCountryId;
		internal static readonly IEntityRelation PlayingAbilityEntityUsingPlayingAbilityFromStatic = new CalendarRelations().PlayingAbilityEntityUsingPlayingAbilityFrom;
		internal static readonly IEntityRelation PlayingAbilityEntityUsingPlayingAbilityToStatic = new CalendarRelations().PlayingAbilityEntityUsingPlayingAbilityTo;
		internal static readonly IEntityRelation SurfaceEntityUsingSurfaceStatic = new CalendarRelations().SurfaceEntityUsingSurface;

		/// <summary>CTor</summary>
		static StaticCalendarRelations() { }
	}
}
