@inject IConfiguration Configuration
@model EditModel
@using System.Globalization
@using Microsoft.Extensions.Configuration
@using TournamentCalendar.Controllers
@using TournamentCalendar.Library
@using TournamentCalendar.Models.InfoService
@using TournamentCalendar.Views
@using TournamentCalendarDAL.HelperClasses
@{
    ViewContext.ClientValidationEnabled = false;
    var googleConfig = new GoogleConfiguration();
    Configuration.Bind(nameof(GoogleConfiguration), googleConfig);
}
<div class="row">
    <article class="col-sm-6">
        @if (string.IsNullOrEmpty(Model.Guid))
        {
            <h3 class="h3">Jetzt bei Volley-News anmelden!</h3>
            <p>
                Aktuelle Volleyballinfos zu Turnieren und Veranstaltungen
                bequem per E-Mail erhalten.
            </p>}
        else
        {
            <h3 class="h3">Registrierung ändern</h3>
            <p>
                Aktuelle Volleyballinfos zu Turnieren und Veranstaltungen
                weiter bequem per E-Mail erhalten.
            </p>}
    </article>
    <article class="col-sm-6">
        <img src="@Url.Content("~/images/volleynews-anmeldung.jpg")" alt="" class="rounded img-fluid" style="width: 100%" />
    </article>
</div>
@using (Model.EditMode == EditMode.New ? Html.BeginForm(nameof(InfoService.Entry), nameof(InfoService), new { guid = string.Empty }, FormMethod.Post, null, new { @class = "pb-2" }) : Html.BeginForm(nameof(InfoService.Entry), nameof(InfoService), new { guid = string.Empty }, FormMethod.Post, true, new { @class = "pb-2" }))
{
    @* Validation summary must be inside BeginForm block *@
    @Html.ValidationSummary(false, "Es sind Fehler aufgetreten. Bitte korrigieren und erneut speichern.", new { @class = "validation-summary-errors msg-validation rounded" })

    if (Model.EditMode == EditMode.Change)
    {
        @Html.HiddenFor(m => m.Guid)
    }

    <fieldset class="rounded">
        <legend class="rounded">
            Persönliche Angaben
        </legend>
        <div class="row">
            <div class="col-sm-12">
                <label asp-for="@Model.Email" class="form-label"></label>
                <input asp-for="@Model.Email" maxlength="@InfoServiceFields.Email.MaxLength" class="form-control input-required">
                <span asp-validation-for="@Model.Email" class="msg-error-text"></span>
                <label asp-for="@Model.Gender" class="form-label"></label>
                <select asp-for="@Model.Gender" asp-items="Model.GetGenderList()" class="form-select input-required" style="width: 10rem"></select>
                <span asp-validation-for="@Model.Gender" class="msg-error-text"></span>
                <label asp-for="@Model.Title" class="form-label"></label>
                <input asp-for="@Model.Title" maxlength="@InfoServiceFields.Title.MaxLength" class="form-control">
                <span asp-validation-for="@Model.Title" class="msg-error-text"></span>
                <label asp-for="@Model.FirstName" class="form-label"></label>
                <input asp-for="@Model.FirstName" maxlength="@InfoServiceFields.FirstName.MaxLength" class="form-control input-required">
                <span asp-validation-for="@Model.FirstName" class="msg-error-text"></span>
                <label asp-for="@Model.Nickname" class="form-label"></label>
                <input asp-for="@Model.Nickname" maxlength="@InfoServiceFields.Nickname.MaxLength" class="form-control">
                <span asp-validation-for="@Model.Nickname" class="msg-error-text"></span>
                <label asp-for="@Model.LastName" class="form-label"></label>
                <input asp-for="@Model.LastName" maxlength="@InfoServiceFields.LastName.MaxLength" class="form-control input-required">
                <span asp-validation-for="@Model.LastName" class="msg-error-text"></span>
                <label asp-for="@Model.ClubName" class="form-label"></label>
                <input asp-for="@Model.ClubName" maxlength="@InfoServiceFields.ClubName.MaxLength" class="form-control">
                <span asp-validation-for="@Model.ClubName" class="msg-error-text"></span>
                <label asp-for="@Model.TeamName" class="form-label"></label>
                <input asp-for="@Model.TeamName" maxlength="@InfoServiceFields.TeamName.MaxLength" class="form-control">
                <span asp-validation-for="@Model.TeamName" class="msg-error-text"></span>
            </div>
        </div>
    </fieldset>
    <fieldset class="rounded">
        <legend class="rounded">
            Ich möchte nur Turnierinformationen rund um folgenden Standort
        </legend>
        <div class="row">
            <div class="col">
                <div class="form-check">
                    <input asp-for="@Model.IsAddressEntered" type="checkbox" class="form-check-input" />
                    <label asp-for="@Model.IsAddressEntered" class="form-check-label"></label>
                </div>
                <span asp-validation-for="@Model.IsAddressEntered" class="msg-error-text"></span>
                <section id="AddressSection" class="@(Model.IsAddressEntered ? "collapse show" : "collapse")">
                    <label asp-for="@Model.MaxDistance" class="form-label">Maximale Entfernung in Kilometern von nachfolgendem Standort (ab 50 km)</label>
                    <input asp-for="@Model.MaxDistance" type="text" maxlength="4" class="form-control" style="width: 5rem">
                    <span asp-validation-for="@Model.MaxDistance" class="msg-error-text"></span>
                    <label asp-for="@Model.CountryId" class="form-label"></label>
                    <select asp-for="@Model.CountryId" asp-items="(await Model.GetCountriesList())" class="form-select" style="width: 12rem"></select>
                    <span asp-validation-for="@Model.CountryId" class="msg-error-text"></span>
                    <label asp-for="@Model.ZipCode" class="form-label"></label>
                    <input asp-for="@Model.ZipCode" maxlength="@InfoServiceFields.ZipCode.MaxLength" class="form-control" style="width:6rem">
                    <span asp-validation-for="@Model.ZipCode" class="msg-error-text"></span>
                    <label asp-for="@Model.City" class="form-label"></label>
                    <input asp-for="@Model.City" maxlength="@InfoServiceFields.City.MaxLength" class="form-control">
                    <span asp-validation-for="@Model.City" class="msg-error-text"></span>
                    <label asp-for="@Model.Street" class="form-label"></label>
                    <input asp-for="@Model.Street" maxlength="@InfoServiceFields.Street.MaxLength" class="form-control">
                    <span asp-validation-for="@Model.Street" class="msg-error-text"></span>
                    <!-- Button trigger modal -->
                    <div class="pt-3">
                        <button type="button" id="btnModal" class="btn btn-primary" disabled="disabled" data-bs-toggle="modal" data-bs-target="#locationModal">
                            <i class="bi bi-geo-alt-fill"></i> Standort auf Karte zeigen
                        </button>
                    </div>
                </section>
                <!-- Start Location Modal -->
                <div class="modal fade" id="locationModal" data-keyboard="true" tabindex="-1" aria-labelledby="locationMapLabel" aria-hidden="true">
                    <div class="modal-dialog modal-xl" style="max-width: 58rem;">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="locationMapLabel">Karte mit Standort in Google Maps</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                                </button>
                            </div>
                            <div class="modal-body">
                                <div id="mapPlaceholder" style="border: 1px solid #979797; background-color: #e5e3df; width: 100%; height: 400px; margin-top: 15px">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- End Location Modal -->
            </div>
        </div>
    </fieldset>
    <fieldset class="rounded">
        <legend class="rounded">
            Speichern
        </legend>
        <div class="row">
            <div class="col-sm-12">
                <div>
                    Letzte Änderung:
                    @if (Model.EditMode == EditMode.New)
                    {
                        <text>keine</text>
                    }
                    else
                    {
                        @Model.ModifiedOn.ToString("dd.MM.yyyy - HH:mm:ss")
                    }
                    @if (Model.UnSubscribedOn.HasValue)
                    {
                        <strong> - abgemeldet</strong>
                    }
                </div>
                <div>
                    <img id="CaptchaImage" class="rounded" src="@Url.Action(nameof(Captcha.Index), nameof(Captcha))@("?guid=" + Guid.NewGuid())" alt="Captcha" style="vertical-align: bottom; width: 12rem" />
                    <span id="ReloadCaptcha" style="cursor: pointer"><i class="bi bi-arrow-clockwise bi-2x" style="margin: 0 5px 0 5px" title="Bild neu laden"></i>Bild neu laden</span><br />
                    <label asp-for="@Model.Captcha" class="form-label"></label>
                </div>
                <input asp-for="@Model.Captcha" maxlength="7" class="form-control input-required" style="width:12rem">
                <span asp-validation-for="@Model.Captcha" class="msg-error-text"></span>
            </div>
            <div class="col-md-7 col-sm-7 mt-3">
                <input type="submit" name="save" value="Eintrag speichern" class="col-12 btn btn-lg btn-success" />
            </div>
            <div class="col-md-5 col-sm-5 mt-3">
                <input type="submit" formaction="@Url.Action(nameof(InfoService.Unsubscribe), nameof(InfoService))" name="unsubscribe" value="Von Volley-News abmelden" @if ((Model.EditMode == EditMode.New) || (Model.ConfirmedOn.HasValue && Model.UnSubscribedOn.HasValue)) { <text> disabled="disabled" </text> } class="cancel col-12 btn btn-lg btn-success" />
            </div>
        </div>
    </fieldset>
}
@section CssSection {}
@section ScriptStandardSection {
    @* Note: Google requires an API key for all requests since 11 June 2018 *@
    <script type="text/javascript" src="@string.Format("https://maps.googleapis.com/maps/api/js?key={0}&language=de&region=DE", googleConfig.WebApiKey)"></script>
    <script type="text/javascript" src="@Url.Content(ScriptName.Js.Location)" asp-append-version="true"></script>
    <script type="text/javascript">
    //<![CDATA[
    'use strict';
    document.addEventListener('DOMContentLoaded', OnDOMContentLoaded, false);
    function OnDOMContentLoaded() {
        document.getElementById('@Html.IdFor(m => m.Email)').focus();
        const address = new AddressSection('@Html.IdFor(m => m.IsAddressEntered)', 'AddressSection');
        const loc = new Location('@Html.IdFor(m => m.CountryId)', '@Html.IdFor(m => m.ZipCode)', '@Html.IdFor(m => m.City)', '@Html.IdFor(m => m.Street)', 'btnModal', 'mapPlaceholder');
        @* Disable input fields, if checkbox for address details is disabled *@
        address.enableDisableInputFields();
        @if (Model.Latitude.HasValue && Model.Longitude.HasValue)
        {
            <text>loc.showLocationOnGoogleMaps(@Model.Latitude.Value.ToString(CultureInfo.InvariantCulture), @Model.Longitude.Value.ToString(CultureInfo.InvariantCulture)); </text>
        }

        document.getElementById('locationModal').addEventListener('shown.bs.modal', (e) => {
            loc.update();
        });

        const reloadCaptcha = document.getElementById('ReloadCaptcha');
        if (reloadCaptcha) {
            reloadCaptcha.addEventListener('click', function () {
                if (document.images) document.images.CaptchaImage.src = '@Url.Action(nameof(Captcha.Index), nameof(Captcha))?new=1&amp;time=' + new Date().getTime();
                document.getElementById('@Html.IdFor(m => m.Captcha)').focus();
            });
        }
    }

    class AddressSection {
        @* // Using https://jsdoc.app/ syntax
        /**
        * An address section with child input elements.
        * @constructor
        * @param {string} enterAddrToggleId - Id of the checkbox to enable/disable the address section (see below).
        * @param {string} addressSectionId - Id of the section element which has input elements as children.
        */
        *@
            constructor(enterAddrToggleId, addressSectionId) {
                this.enterAddrToggleEle = document.getElementById(enterAddrToggleId);
                this.enterAddrToggleEle.addEventListener('change', this.enableDisableInputFields.bind(this), false);
                this.addressSectionEle = document.getElementById(addressSectionId);
            }

            enableDisableInputFields() {
                const allFormControls = this.addressSectionEle.querySelectorAll('.form-control, .form-select');
                @* Animate with Bootstrap 5 *@
                const bsCollapse = new bootstrap.Collapse(this.addressSectionEle, {
                    toggle: false
                })

                if (this.enterAddrToggleEle.checked) {
                    allFormControls.forEach(element => { element.removeAttribute('disabled'); });
                    bsCollapse.show();
                }
                else {
                    bsCollapse.hide();
                    allFormControls.forEach(element => { element.setAttribute('disabled', 'disabled'); });
                }
            }
        }
    //]]>
    </script>
}