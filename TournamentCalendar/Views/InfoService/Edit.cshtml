@inject IWebHostEnvironment WebHostEnvironment
@inject IConfiguration Configuration
@model EditModel
@using System.Globalization
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Configuration
@using TournamentCalendar.Controllers
@using TournamentCalendar.Library
@using TournamentCalendar.Models.InfoService
@using TournamentCalendar.Views
@using TournamentCalendarDAL.HelperClasses
@{
    var googleConfig = new GoogleConfiguration();
    Configuration.Bind(nameof(GoogleConfiguration), googleConfig);
}
<div class="row">
    <article class="col-sm-6">
        @if (string.IsNullOrEmpty(Model.Guid))
        {
            <h3 class="h3">Jetzt bei Volley-News anmelden!</h3>
            <p>
                Aktuelle Volleyballinfos zu Turnieren und Veranstaltungen
                bequem per E-Mail erhalten.
            </p>}
        else
        {
            <h3 class="h3">Registrierung ändern</h3>
            <p>
                Aktuelle Volleyballinfos zu Turnieren und Veranstaltungen
                weiter bequem per E-Mail erhalten.
            </p>}
    </article>
    <article class="col-sm-6">
        <img src="@Url.Content("~/images/volleynews-anmeldung.jpg")" alt="" class="rounded img-fluid" style="width: 100%" />
    </article>
</div>
@using (Model.EditMode == EditMode.New ? Html.BeginForm(nameof(InfoService.Entry), nameof(InfoService), new { guid = string.Empty }, FormMethod.Post, null, new { @class = "pb-2" }) : Html.BeginForm(nameof(InfoService.Entry), nameof(InfoService), new { guid = string.Empty }, FormMethod.Post, true, new { @class = "pb-2" }))
{
    @* Validation summary must be inside BeginForm block *@
    @Html.ValidationSummary(false, "Es sind Fehler aufgetreten. Bitte korrigieren und erneut speichern.", new { @class = "validation-summary-errors msg-validation rounded" })

    if (Model.EditMode == EditMode.Change)
    {
        @Html.HiddenFor(m => m.Guid)
    }

    <fieldset class="rounded">

        <legend class="rounded">
            Persönliche Angaben
        </legend>
        <div class="row">
            <div class="col-sm-12">
                @Html.LabelFor(m => m.Email)
                @Html.TextBoxFor(m => m.Email, new { maxlength = InfoServiceFields.Email.MaxLength, @class = "form-control input-required" })
                @Html.ValidationMessageFor(m => m.Email, null, new { @class = "msg-error-text" })
                @Html.LabelFor(m => m.Gender)
                @Html.DropDownListFor(m => m.Gender, Model.GetGenderList(), new { @class = "input-required form-control", style = "width:10rem" })
                @Html.ValidationMessageFor(m => m.Gender, null, new { @class = "msg-error-text" })
                @Html.LabelFor(m => m.Title)
                @Html.TextBoxFor(m => m.Title, new { maxlength = InfoServiceFields.Title.MaxLength, @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Title, null, new { @class = "msg-error-text" })
                @Html.LabelFor(m => m.FirstName)
                @Html.TextBoxFor(m => m.FirstName, new { maxlength = InfoServiceFields.FirstName.MaxLength, @class = "form-control input-required" })
                @Html.ValidationMessageFor(m => m.FirstName, null, new { @class = "msg-error-text" })
                @Html.LabelFor(m => m.Nickname)
                @Html.TextBoxFor(m => m.Nickname, new { maxlength = InfoServiceFields.Nickname.MaxLength, @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Nickname, null, new { @class = "msg-error-text" })
                @Html.LabelFor(m => m.LastName)
                @Html.TextBoxFor(m => m.LastName, new { maxlength = InfoServiceFields.LastName.MaxLength, @class = "form-control input-required" })
                @Html.ValidationMessageFor(m => m.LastName, null, new { @class = "msg-error-text" })
                @Html.LabelFor(m => m.ClubName)
                @Html.TextBoxFor(m => m.ClubName, new { maxlength = InfoServiceFields.ClubName.MaxLength, @class = "form-control" })
                @Html.LabelFor(m => m.TeamName)
                @Html.TextBoxFor(m => m.TeamName, new { maxlength = InfoServiceFields.TeamName.MaxLength, @class = "form-control" })
            </div>
        </div>
    </fieldset>
    <fieldset class="rounded">
        <legend class="rounded">
            Ich möchte nur Turnierinformationen rund um folgenden Standort
        </legend>
        <div class="row">
            <div class="col">
                @Html.CheckBoxFor(m => m.IsAddressEntered)
                @Html.LabelFor(m => m.IsAddressEntered, null, new { @class = "form-check-label", style = "display: inline" })
                @Html.ValidationMessageFor(m => m.IsAddressEntered, null, new { @class = "msg-error-text" })
                <section id="AddressSection">
                    <label for="@Html.NameFor(m => m.MaxDistance)">Maximale Entfernung in Kilometern von nachfolgendem Standort (ab 50 km)</label>
                    @Html.TextBoxFor(m => m.MaxDistance, new { maxlength = 4, @class = "form-control", style = "width: 5rem" })
                    @Html.ValidationMessageFor(m => m.MaxDistance, null, new { @class = "msg-error-text" })
                    @Html.LabelFor(m => m.CountryId)
                    @Html.DropDownListFor(m => m.CountryId, Model.GetCountriesList(), new { @class = "form-control", style = "width:12rem" })
                    @Html.LabelFor(m => m.ZipCode)
                    @Html.TextBoxFor(m => m.ZipCode, new { maxlength = InfoServiceFields.ZipCode.MaxLength, @class = "form-control", style = "width:6rem" })
                    @Html.LabelFor(m => m.City)
                    @Html.TextBoxFor(m => m.City, new { maxlength = InfoServiceFields.City.MaxLength, @class = "form-control" })
                    @Html.LabelFor(m => m.Street)
                    @Html.TextBoxFor(m => m.Street, new { maxlength = InfoServiceFields.Street.MaxLength, @class = "form-control" })
                    <!-- Button trigger modal -->
                    <div class="pt-3">
                        <button type="button" class="btn btn-primary" onclick="ShowHideLocation()" data-toggle="modal" data-target="#locationModal">
                            <i class="bi bi-geo-alt-fill"></i> Karte mit Standort in Google Maps
                        </button>
                    </div>
                    <!-- Start Location Modal -->
                    <div class="modal fade" id="locationModal" data-keyboard="true" tabindex="-1" aria-labelledby="locationMapLabel" aria-hidden="true">
                        <div class="modal-dialog modal-xl">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="locationMapLabel">Karte mit Standort in Google Maps</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <div id="mapPlaceholder" style="@if (!Model.Longitude.HasValue && !Model.Latitude.HasValue)
                                                                    {
                                                                        <text>display: none; </text>
                                                                    }; border: 1px solid #979797; background-color: #e5e3df; width: 100%; height: 400px; margin-top: 15px">
                                        <div style="padding: 1rem; color: gray">
                                            Karte wird mit JavaScript geladen...
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- End Location Modal -->
                </section>
            </div>
        </div>
    </fieldset>

    <fieldset class="rounded">

        <legend class="rounded">
            Speichern
        </legend>

        <div class="row">
            <div class="col-sm-12">
                <div>
                    Letzte Änderung:
                    @if (Model.EditMode == EditMode.New)
                    {
                        <text>keine</text>
                    }
                    else
                    {
                        @Model.ModifiedOn.ToString("dd.MM.yyyy - HH:mm:ss")
                    }
                    @if (Model.UnSubscribedOn.HasValue)
                    {
                        <strong> - abgemeldet</strong>
                    }
                </div>
                <div>
                    <img id="CaptchaImage" class="rounded" src="@Url.Action(nameof(Captcha.Index), nameof(Captcha))@("?guid=" + Guid.NewGuid())" alt="Captcha" style="vertical-align: bottom; width: 12rem" />
                    <span onclick="javascript:if (document.images) document.images.CaptchaImage.src = '@Url.Action(nameof(Captcha.Index), nameof(Captcha))?new=1&amp;time=' + new Date().getTime();" style="cursor: pointer"><i class="bi bi-arrow-clockwise bi-2x" style="margin: 0 5px 0 5px" title="Bild neu laden"></i>Bild neu laden</span><br />
                    @Html.LabelFor(m => m.Captcha)
                </div>
                @Html.TextBoxFor(m => m.Captcha, new { maxlength = "7", @class = "form-control input-required", style = "width:12rem" })
                @Html.ValidationMessageFor(m => m.Captcha, null, new { @class = "msg-error-text" })
            </div>
            <div class="col-md-7 col-sm-7 mt-3">
                @* class="cancel" will stop jquery.validate from validation *@
                <input type="submit" name="save" value="Eintrag speichern" class="col-12 btn btn-lg btn-success" />
            </div>
            <div class="col-md-5 col-sm-5 mt-3">
                <input type="submit" formaction="@Url.Action(nameof(InfoService.Unsubscribe), nameof(InfoService))" name="unsubscribe" value="Von Volley-News abmelden" @if ((Model.EditMode == EditMode.New) || (Model.ConfirmedOn.HasValue && Model.UnSubscribedOn.HasValue)) { <text> disabled="disabled" </text> } class="cancel col-12 btn btn-lg btn-success" />
            </div>

        </div>
    </fieldset>
}
@section CssSection {}
@section ScriptStandardSection {
    @* Note: Google requires an API key for all requests since 11 June 2018 *@
    <script type="text/javascript" src="@string.Format("https://maps.googleapis.com/maps/api/js?key={0}", googleConfig.WebApiKey)"></script>
    <script src="@Url.Content(ScriptName.Lib.JqueryValidationAllJs)"></script>
    <script type="text/javascript">
    //<![CDATA[
    document.addEventListener('DOMContentLoaded', Înitialize, false);
    function Înitialize() {
        document.getElementById('@Html.IdFor(m => m.IsAddressEntered)').addEventListener('change', EnableDisableAddressFields);
        EnableDisableAddressFields();
        @if (Model.Latitude.HasValue && Model.Longitude.HasValue)
        {
            <text>ShowLocationOnGoogleMaps(@Model.Latitude.Value.ToString(CultureInfo.InvariantCulture), @Model.Longitude.Value.ToString(CultureInfo.InvariantCulture)); </text>
        }

        document.getElementById('@Html.IdFor(m => m.Email)').focus();
    }

    function EnableDisableAddressFields() {
        if (document.getElementById('@Html.IdFor(m => m.IsAddressEntered)').checked) {
            GetLocationInputElements().forEach(function (element, index) {
                element.removeAttribute('disabled');
            });
            document.getElementById('@Html.IdFor(m => m.MaxDistance)').removeAttribute('disabled');
            document.getElementById('AddressSection').style.display = 'block';
        }
        else {
            GetLocationInputElements().forEach(function (element, index) {
                element.setAttribute('disabled', 'disabled');
            });
            document.getElementById('@Html.IdFor(m => m.MaxDistance)').setAttribute('disabled', 'disabled');
            document.getElementById('AddressSection').style.display = 'none';
        }
    }
    
    function GetLocationInputElements() { @* without MaxDistance field *@
        return [
            document.getElementById('@Html.IdFor(m => m.CountryId)'),
            document.getElementById('@Html.IdFor(m => m.ZipCode)'),
            document.getElementById('@Html.IdFor(m => m.City)'),
            document.getElementById('@Html.IdFor(m => m.Street)')
        ];
    }
    
    function ShowHideLocation() {
        if (document.getElementById('mapPlaceholder').style.display === 'none' && IsAddressEntered()) {
            GetLocation();
            document.getElementById('mapPlaceholder').style.display = 'block';
        } else {
            document.getElementById('mapPlaceholder').style.display = 'none';
        }
    }
    
    function IsAddressEntered() {
        return GetAddress().length > 3;
    }

    function GetAddress() {
        let address = '';
        GetLocationInputElements().forEach(function (element, index) {
            address += (element.value + ' ');
        });
        return address.trim();
    }

    function GetLocation() {
        // requires https://maps.googleapis.com/maps/api/js
        const geocoder = new google.maps.Geocoder();
        const address = GetAddress();
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                const latitude = results[0].geometry.location.lat();
                const longitude = results[0].geometry.location.lng();
                ShowLocationOnGoogleMaps(latitude, longitude);
                document.getElementById('mapPlaceholder').style.display = 'block';
            } else {
                document.getElementById('mapPlaceholder').style.display = 'none';
            }
        });
    }

    function ShowLocationOnGoogleMaps(latitude, longitude) {
        // requires https://maps.googleapis.com/maps/api/js
            const coords = new google.maps.LatLng(latitude, longitude);

            const mapOptions = {
            zoom: 14,
            center: coords,
            mapTypeControl: true,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };

            //create the map, and place it in the HTML map div
            const map = new google.maps.Map(document.getElementById('mapPlaceholder'), mapOptions);

            //place the initial marker
            const marker = new google.maps.Marker({
            position: coords,
            map: map,
            title: 'Angegebener Standort'
        });
    }
    //]]>
    </script>
}