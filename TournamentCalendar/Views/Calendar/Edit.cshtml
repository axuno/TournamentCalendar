@inject IConfiguration Configuration
@model EditModel
@using TournamentCalendar.Models.Calendar
@using TournamentCalendar.Controllers
@using TournamentCalendar.Library
@using TournamentCalendar.Views
@using TournamentCalendarDAL.HelperClasses
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Calendar = TournamentCalendar.Controllers.Calendar
@using System.Threading
@using System.Globalization
@{
    ViewContext.ClientValidationEnabled = false;
    var googleConfig = new GoogleConfiguration();
    Configuration.Bind(nameof(GoogleConfiguration), googleConfig);
    var countriesList = await Model.GetCountriesList(CancellationToken.None);
}
<article>
    @if (Model.EditMode == EditMode.New)
    {
        <h3 class="h3">Neuer Turniereintrag</h3>
    }
    else
    {
        <h3 class="h3">Turniereintrag ändern</h3>
    }
    <p>Über dieses Formular kann ein neues Turnier im Turnierkalender angelegt, bzw. ein gespeichertes Turnier bearbeitet werden.</p>
    @if (Model.PossibleDuplicateFound != null)
    {
        <div class="msg-error">
            Dieses Turnier ist bereits im Turnierkalender @(Html.ActionLink("eingetragen", nameof(Calendar.Id), nameof(Calendar), new { id = Model.PossibleDuplicateFound.Id }, null))).
        </div>
    }
</article>

<form asp-controller="@nameof(Calendar)" asp-action="@nameof(Calendar.Entry)" asp-route-guid="" method="post" class="pb-2">
@* Validation summary must be inside form block *@
<div asp-validation-summary="All" class="validation-summary-errors msg-validation rounded">Es sind Fehler aufgetreten. Bitte die markierten Felder korrigieren und erneut speichern.</div>
<input type="hidden" asp-for="@Model.Guid" value="@Model.Guid"/>
<fieldset class="rounded">
    <legend class="rounded">
        Bezeichnung
    </legend>
    <div class="row">
        <div class="col-12">
            <label asp-for="@Model.TournamentName" class="form-label"></label>
            <input asp-for="@Model.TournamentName" maxlength="@CalendarFields.TournamentName.MaxLength" class="form-control" title="Turniername, z.B. &quot;12. Welfen-Cup&quot;">
            <span asp-validation-for="@Model.TournamentName" class="msg-error-text"></span>
            <label asp-for="@Model.Organizer" class="form-label"></label>
            <input asp-for="@Model.Organizer" maxlength="@CalendarFields.Organizer.MaxLength" class="form-control" title="Veranstalter, z.B. &quot;Volleyballclub Berlin&quot;">
            <span asp-validation-for="@Model.Organizer" class="msg-error-text"></span>
            @*
                @Html.LabelFor(m => m.Special)
                @Html.TextBoxFor(m => m.Special, new { maxlength = TournamentCalendarFields.Special.MaxLength, @class = "form-control", title="Spezialangaben" })
                @Html.ValidationMessageFor(m => m.Special, null, new { @class = "msg-error-text" })
            *@
        </div>
    </div>
</fieldset>

<fieldset class="rounded">
    <legend class="rounded">
        Datum und Uhrzeit
    </legend>
    <div class="row g-0">
        <div class="col-12">
            <div class="row">
                <div class="col-md-5 col-sm-5">
                    <label asp-for="@Model.DateFromText" class="form-label"></label>
                    <div id="@(Model.DateFromText)-c" class="input-group" data-input-type="date" data-td-target-input="nearest" data-td-target-toggle="nearest" style="width: 11rem;">
                        <input asp-for="@Model.DateFromText" maxlength="10" class="form-control" placeholder="tt.mm.jjj" title="Maximal 1 Jahr in der Zukunft">
                        <span class="input-group-text" data-td-target="@(Model.DateFromText)-c" data-td-toggle="datetimepicker"><i class="bi bi-calendar3 bi-lg"></i></span>
                    </div>
                    <span asp-validation-for="@Model.DateFromText" class="msg-error-text"></span>
                </div>
                <div class="col-md-7 col-sm-7">
                    <label asp-for="@Model.TimeFrom" class="form-label"></label>
                    <div class="input-group" data-input-type="time" data-td-target-input="nearest" data-td-target-toggle="nearest" style="width: 8rem;">
                        <input asp-for="@Model.TimeFrom" maxlength="5" class="form-control" placeholder="hh:mm" title="Turnierbeginn, oder 00:00 für &quot;unbekannt&quot;">
                        <span class="input-group-text" data-td-target="@(Model.TimeFrom)-c" data-td-toggle="datetimepicker"><i class="bi bi-clock bi-lg"></i></span>
                    </div>
                    <span asp-validation-for="@Model.TimeFrom" class="msg-error-text"></span>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="row">
                <div class="col-md-5 col-sm-5">
                    <label asp-for="@Model.DateToText" class="form-label"></label>
                    <div id="@(Model.DateToText)-c" class="input-group" data-input-type="date" data-td-target-input="nearest" data-td-target-toggle="nearest" style="width: 11rem;">
                        <input asp-for="@Model.DateToText" maxlength="10" class="form-control" placeholder="tt.mm.jjj" title="Maximal 1 Jahr in der Zukunft">
                        <span class="input-group-text" data-td-target="@(Model.DateToText)-c" data-td-toggle="datetimepicker"><i class="bi bi-calendar3 bi-lg"></i></span>
                    </div>
                    <span asp-validation-for="@Model.DateToText" class="msg-error-text"></span>
                </div>
                <div class="col-md-7 col-sm-7">
                    <label asp-for="@Model.TimeTo" class="form-label"></label>
                    <div class="input-group" data-input-type="time" data-td-target-input="nearest" data-td-target-toggle="nearest" style="width: 8rem;">
                        <input asp-for="@Model.TimeTo" maxlength="5" class="form-control" placeholder="hh:mm">
                        <span class="input-group-text" data-td-target="@(Model.TimeTo)-c" data-td-toggle="datetimepicker"><i class="bi bi-clock bi-lg"></i></span>
                    </div>
                    <span asp-validation-for="@Model.TimeTo" class="msg-error-text"></span>
                </div>
            </div>
        </div>
        <div class="col-12">
            <label asp-for="@Model.ClosingDateText" class="form-label"></label>
            <div id="@(Model.ClosingDateText)-c" class="input-group" data-input-type="date" data-td-target-input="nearest" data-td-target-toggle="nearest" style="width: 11rem;">
                <input asp-for="@Model.ClosingDateText" maxlength="10" class="form-control" placeholder="tt.mm.jjj">
                <span class="input-group-text" data-td-target="@(Model.ClosingDateText)-c" data-td-toggle="datetimepicker"><i class="bi bi-calendar3 bi-lg"></i></span>
            </div>
            <span asp-validation-for="@Model.ClosingDateText" class="msg-error-text"></span>
        </div>
    </div>
</fieldset>
<fieldset class="rounded">
    <legend class="rounded">
        Besetzung
    </legend>
    <div class="row">
        <div class="col-12">
            <label asp-for="@Model.NumOfTeams" class="form-label"></label>
            <input asp-for="@Model.NumOfTeams" type="text" maxlength="3" class="form-control" style="width:4rem;" title="Max. Anzahl der Mannschaften. 0 = unbekannt bzw. unbegrenzt.">
            <span asp-validation-for="@Model.NumOfTeams" class="msg-error-text"></span>
        </div>
        <div class="col-md-5 col-sm-5">
            <label asp-for="@Model.NumPlayersFemale" class="form-label"></label>
            <div class="d-inline-flex">
                <select asp-for="@Model.MinMaxFemale" asp-items="Model.GetMinMaxPlayerList()" class="form-select me-1" style="width:9rem"></select>
                <input asp-for="@Model.NumPlayersFemale" type="text" maxlength="1" class="form-control d-inline" style="width:2rem">
            </div>
            <span asp-validation-for="@Model.NumPlayersFemale" class="msg-error-text"></span>
        </div>
        <div class="col-md-5 col-sm-5">
            <label asp-for="@Model.NumPlayersMale" class="form-label"></label>
            <div class="d-inline-flex">
                <select asp-for="@Model.MinMaxMale" asp-items="Model.GetMinMaxPlayerList()" class="form-select me-1" style="width: 9rem"></select>
                <input asp-for="@Model.NumPlayersMale" type="text" maxlength="1" class="form-control d-inline" style="width:2rem;">
            </div>
            <span asp-validation-for="@Model.NumPlayersMale" class="msg-error-text"></span>
        </div>
        <div class="col-md-2 col-sm-2"></div>

        <div class="col-md-5 col-sm-5">
            <label asp-for="@Model.PlayingAbilityFrom" class="form-label"></label>
            <select asp-for="@Model.PlayingAbilityFrom" asp-items="Model.GetPlayingAbilityList()" class="form-select" style="width:11rem"></select>
        </div>
        <div class="col-md-5 col-sm-5">
            <label asp-for="@Model.PlayingAbilityTo" class="form-label"></label>
            <select asp-for="@Model.PlayingAbilityTo" asp-items="Model.GetPlayingAbilityList()" class="form-select" style="width:11rem"></select>
        </div>
        <div class="col-md-2 col-sm-2"></div>
    </div>
</fieldset>
<fieldset class="rounded">
    <legend class="rounded">
        Austragungsort
    </legend>
    <div class="row">
        <div class="col-md-12">
            <label asp-for="@Model.Surface" class="form-label"></label>
            <select asp-for="@Model.Surface" asp-items="Model.GetSurfaceList()" class="form-select" style="width:11rem"></select>
            <div class="pt-3">
                Nur <strong>genaue Angaben</strong> mit Postleitzahl, Ort und Straße ermöglichen die Anzeige einer Karte für die Anfahrt.<br/>
            </div>
            <label asp-for="@Model.Venue" class="form-label"></label>
            <input asp-for="@Model.Venue" type="text" maxlength="@CalendarFields.Venue.MaxLength" class="form-control" title="Hallenbezeichung, z.B. &quot;Jahn-Turnhalle&quot;">
            <span asp-validation-for="@Model.Venue" class="msg-error-text"></span>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <label asp-for="@Model.CountryId" class="form-label"></label>
            <select asp-for="@Model.CountryId" asp-items="@countriesList" class="form-select" style="width:11rem"></select>
        </div>
        <div class="col-md-8">
            <label asp-for="@Model.PostalCode" class="form-label"></label>
            <input asp-for="@Model.PostalCode" type="text" maxlength="@CalendarFields.PostalCode.MaxLength" class="form-control" style="width:8rem">
            <span asp-validation-for="@Model.PostalCode" class="msg-error-text"></span>
        </div>
        <div class="col-md-12">
            <label asp-for="@Model.City" class="form-label"></label>
            <input asp-for="@Model.City" type="text" maxlength="@CalendarFields.City.MaxLength" class="form-control">
            <span asp-validation-for="@Model.City" class="msg-error-text"></span>
            <label asp-for="@Model.Street" class="form-label"></label>
            <input asp-for="@Model.Street" type="text" maxlength="@CalendarFields.Street.MaxLength" class="form-control">
            <span asp-validation-for="@Model.Street" class="msg-error-text"></span>
        </div>
    </div>
    <!-- Button trigger modal -->
    <div class="pt-3">
        <button type="button" id="btnModal" class="btn btn-primary" disabled="disabled" data-bs-toggle="modal" data-bs-target="#locationModal">
            <i class="bi bi-geo-alt-fill"></i> Standort auf Karte zeigen
        </button>
    </div>
</fieldset>
<fieldset class="rounded">
    <legend class="rounded">
        Kontaktdaten
    </legend>
    <div class="row">
        <div class="col-md-12">
            <label asp-for="@Model.ContactAddress" class="form-label"></label>
            <textarea asp-for="@Model.ContactAddress" class="form-control" style="height: 7rem" title="Ansprechpartner, Postanschrift, Telefon, usw."></textarea>
            <span asp-validation-for="@Model.ContactAddress" class="msg-error-text"></span>
            <label asp-for="@Model.Email" class="form-label"></label>
            <input asp-for="@Model.Email" type="text" maxlength="@CalendarFields.Email.MaxLength" class="form-control" title="E-Mail für Rückfragen oder Anmeldungen">
            <span asp-validation-for="@Model.Email" class="msg-error-text"></span>
            <label asp-for="@Model.Website" class="form-label"></label>
            <input asp-for="@Model.Website" type="text" maxlength="@CalendarFields.Website.MaxLength" class="form-control" title="Web-Adresse, z.B. https://volleyball-liga.de">
            <span asp-validation-for="@Model.Website" class="msg-error-text"></span>
        </div>
    </div>
</fieldset>
<fieldset class="rounded">
    <legend class="rounded">
        Weitere Angaben
    </legend>
    <div class="row">
        <div class="col-md-4">
            <label asp-for="@Model.EntryFee" class="form-label"></label>
            <div class="input-group" style="width: 8rem;">
                <input asp-for="@Model.EntryFee" type="text" maxlength="6" class="form-control">
                <span class="input-group-text">€</span>
            </div>
            <span asp-validation-for="@Model.EntryFee" class="msg-error-text"></span>
        </div>
        <div class="col-md-8">
            <label asp-for="@Model.Bond" class="form-label"></label>
            <div class="input-group" style="width: 8rem;">
                <input asp-for="@Model.Bond" type="text" maxlength="6" class="form-control">
                <span class="input-group-text">€</span>
            </div>
            <span asp-validation-for="@Model.Bond" class="msg-error-text"></span>
        </div>
        <div class="col-md-12">
            <label asp-for="@Model.Info" class="form-label"></label>
            <textarea asp-for="@Model.Info" class="form-control" style="height: 8rem" title="Weitere Infos wie Hallenöffnung, Anfahrt, Verpflegung u.dgl."></textarea>
            <span asp-validation-for="@Model.Info" class="msg-error-text"></span>
        </div>
    </div>
</fieldset>
<fieldset class="rounded">
    <legend class="rounded">
        Absender des Turniereintrags
    </legend>
    <div class="row">
        <div class="col-md-12">
            <div>
                <label><b>Notwendige Angaben</b>, die im Turnierkalender <b>nicht angezeigt</b> werden</label>
            </div>
            <div>
                Nach dem Speichern wird eine E-Mail mit dem Link zum Freischalten des Turniers im Turnierkalender an folgende Adresse geschickt.
                <b>Ohne Freischalten erscheint das Turnier nicht im Kalender.</b>
                Über den Link in der E-Mail kann das Turnier auch jederzeit bearbeitet werden.
            </div>
            <label asp-for="@Model.PostedByName" class="form-label"></label>
            <input asp-for="@Model.PostedByName" type="text" maxlength="@CalendarFields.PostedByName.MaxLength" class="form-control">
            <span asp-validation-for="@Model.PostedByName" class="msg-error-text"></span>
            <label asp-for="@Model.PostedByEmail" class="form-label"></label>
            <input asp-for="@Model.PostedByEmail" type="text" maxlength="@CalendarFields.PostedByEmail.MaxLength" class="form-control">
            <span asp-validation-for="@Model.PostedByEmail" class="msg-error-text"></span>
        </div>
    </div>
</fieldset>
<fieldset class="rounded">
    <legend class="rounded">
        Speichern
    </legend>
    <div class="row">
        <div class="col-md-12">
            @if (Model.EditMode == EditMode.New && User.IsInRole(TournamentCalendar.Library.Authentication.Constants.RoleName.Editor))
            {
                <div class="form-check">
                    <input asp-for="@Model.ShowTournament" type="checkbox" class="form-check-input" checked="checked" />
                    <label asp-for="@Model.ShowTournament" class="form-check-label"> Turnier im Kalender anzeigen</label>
                </div>
            }
            @if (Model.EditMode == EditMode.Change)
            {
                <div>
                    @if (Model.ShowTournament)
                    {
                        <div>Das Turnier ist bis zum Veranstaltungsdatum im Turnierkalender sichtbar.</div>
                    }
                    else
                    {
                        <div>Das Turnier ist im Kalender <strong>derzeit nicht sichtbar</strong>.</div>
                    }
                    <div class="form-check">
                        <input asp-for="@Model.ShowTournament" type="checkbox" class="form-check-input" checked="checked" />
                        <label asp-for="@Model.ShowTournament" class="form-check-label"> Turnier im Kalender anzeigen</label>
                    </div>
                </div>
            }
            <div>
                Letzte Änderung: @(Model.EditMode == EditMode.New || Model.ModifiedOn == DateTime.MinValue ? "keine" : Model.ModifiedOn.ToString("dd.MM.yyyy - HH:mm:ss"))
            </div>
            @if (User.IsInRole(TournamentCalendar.Library.Authentication.Constants.RoleName.Editor))
            {
                // Captcha won't be checked for authenticated users, but the field is still 'required'
                Model.Captcha = "Valid";
                <input type="hidden" asp-for="@Model.Captcha" value="Valid" />
            }
            else
            {
                <div>
                    <img id="CaptchaImage" style="vertical-align: bottom; width: 200px; display: inline" class="rounded" src="@Url.Action(nameof(Captcha.Index), nameof(Captcha))@("?guid=" + Guid.NewGuid())" alt="Captcha" />
                    <span id="ReloadCaptcha" style="cursor: pointer"><i class="bi bi-arrow-clockwise bi-2x" style="margin: 0 5px 0 5px" title="Bild neu laden"></i>Bild neu laden</span><br/>
                </div>
                <label asp-for="@Model.Captcha" class="form-label"></label>
                <input asp-for="@Model.Captcha" type="text" maxlength="7" class="form-control" style="width:12rem">
                <span asp-validation-for="@Model.Captcha" class="msg-error-text"></span>
            }
            <div class="mt-2">
                @* class="cancel" will stop jquery.validate from validation *@
                <input type="submit" name="save" value="Turnier speichern" class="col-12 col-sm-6 btn btn-lg btn-success" />
            </div>
        </div>
    </div>
</fieldset>
</form>
<!-- Start Location Modal -->
<div class="modal fade" id="locationModal" data-keyboard="true" tabindex="-1" aria-labelledby="locationMapLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" style="max-width: 58rem;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="locationMapLabel">Karte mit Standort in Google Maps</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <div class="modal-body">
                <div id="mapPlaceholder" style="border: 1px solid #979797; background-color: #e5e3df; width: 100%; height: 400px; margin-top: 15px">
                </div>
            </div>
        </div>
    </div>
</div>
<!-- End Location Modal -->
@section CssSection
{
    <link rel="stylesheet" href="@Url.Content(CssName.Lib.TempusDominusCss)" />
    <style>
        /* Settings for light and dark mode */
        .tempus-dominus-widget {
            border: 2px solid #c1e0ea !important;
        }
        .tempus-dominus-widget .date-container-days .day.active,
        .tempus-dominus-widget .date-container-months .month.active,
        .tempus-dominus-widget .date-container-years .year.active {
            color: #fff;
            background-color: #3299bb !important;
        }
        .tempus-dominus-widget button {
            color: #fff;
            background-color: #3299bb;
            border-color: #3299bb;
        }
        /* Settings for light mode only */
        .tempus-dominus-widget.light .calendar-header {
            background-color: #c1e0ea !important;
        }
        .tempus-dominus-widget.light .date-container-days .dow {
                height: 30px !important;
            background-color: #f1fbf9 !important;
            color: #000 !important;
            height: 30px !important;
        }
        .tempus-dominus-widget.light .toolbar {
            background-color: #f1fbf9 !important;
            grid-auto-rows: 30px;
        }
    </style>
}
@section ScriptStandardSection
{
    <script type="text/javascript" src="@string.Format("https://maps.googleapis.com/maps/api/js?key={0}&language=de&region=DE", googleConfig.WebApiKey)"></script>
    <script type="text/javascript" src="@Url.Content(ScriptName.Lib.TempusDominusJs)" asp-append-version="true"></script>
    <script type="text/javascript" src="@Url.Content(ScriptName.Js.Location)" asp-append-version="true"></script>
    <script type="text/javascript">
    //<![CDATA[
    'use strict';

    document.addEventListener('DOMContentLoaded', OnDOMContentLoaded, false);
    function OnDOMContentLoaded() {

        document.getElementById('@Html.IdFor(m => m.TournamentName)').focus();

        const loc = new Location('@Html.IdFor(m => m.CountryId)', '@Html.IdFor(m => m.PostalCode)', '@Html.IdFor(m => m.City)', '@Html.IdFor(m => m.Street)', 'btnModal', 'mapPlaceholder');
        loc.update();
        document.getElementById('locationModal').addEventListener('shown.bs.modal', (e) => {
            loc.update();
        });

        @if (Model.Latitude.HasValue && Model.Longitude.HasValue)
        {
            <text>loc.showLocationOnGoogleMaps(@Model.Latitude.Value.ToString(CultureInfo.InvariantCulture), @Model.Longitude.Value.ToString(CultureInfo.InvariantCulture)); </text>
        }
        
        const reloadCaptcha = document.getElementById('ReloadCaptcha');
        if (reloadCaptcha)  {
            reloadCaptcha.addEventListener('click', function () {
                if (document.images) document.images.CaptchaImage.src = '@Url.Action(nameof(Captcha.Index), nameof(Captcha))?new=1&amp;time=' + new Date().getTime();
                document.getElementById('@Html.IdFor(m => m.Captcha)').focus();
            });
        }

        if ('de' === 'de')
        {
            // Set the locale, if it's not the default (en):
            tempusDominus.DefaultOptions.localization = tempusDominus.locales.de.localization;
            // Hours from 00-23 ('de' default to 'h24')
            tempusDominus.DefaultOptions.localization.hourCycle = 'h23';
        }

        // Change year to 4 digits instead of 2:
        tempusDominus.DefaultOptions.localization.dayViewHeaderFormat = { month: 'long', year: 'numeric' };
        @* Does not seem to work on mobiles: tempusDominus.extend(tempusDominus.plugins.bi_one.load); *@
        tempusDominus.DefaultOptions.display.icons = {
            time: 'bi bi-clock',
            date: 'bi bi-calendar',
            up: 'bi bi-arrow-up',
            down: 'bi bi-arrow-down',
            previous: 'bi bi-chevron-left',
            next: 'bi bi-chevron-right',
            today: 'bi bi-calendar-check',
            clear: 'bi bi-trash',
            close: 'bi bi-x bi-lg'
        };
        tempusDominus.DefaultOptions.display.buttons = {
            today: false,
            clear: true,
            close: true
        };

        [].forEach.call(document.querySelectorAll('[data-input-type="date"]'), function (el) {
            el._tempusDominus = new tempusDominus.TempusDominus(el, {
                container: el,
                allowInputToggle: false,
                localization: {
                    format: 'L'
                },
                display: {
                    viewMode: 'calendar',
                    components: {
                        clock: false
                    },
                },
                restrictions: {
                    minDate: new tempusDominus.DateTime().manipulate(2, 'date').startOf('date'), // +2 days
                    maxDate: new tempusDominus.DateTime().manipulate(1, 'year').endOf('date')    // +1 year
                }
            });

            fixUncaughtExceptions(el._tempusDominus);
        });

        [].forEach.call(document.querySelectorAll('[data-input-type="time"]'), function (el) {
            el._tempusDominus = new tempusDominus.TempusDominus(el, {
                container: el,
                allowInputToggle: false,
                stepping: 15,
                localization: {
                    format: 'LT'
                },
                display: {
                    viewMode: 'clock',
                    components: {
                        decades: false,
                        year: false,
                        month: false,
                        date: false,
                        hours: true,
                        minutes: true,
                        seconds: false
                    },
                    buttons: {
                        today: false,
                        clear: true,
                        close: true
                    }
                }
            });

            fixUncaughtExceptions(el._tempusDominus);
        });
        
        /**
         * TempusDominus v6.7.7 throws when illegal dates/times
         * are entered. This workaround catches the exception by
         * overriding the default 'parseInput' method.
         * See: https://github.com/Eonasdan/tempus-dominus/discussions/2656#discussioncomment-5713755
         * param {tempusDominus.TempusDominus} widget - The widget instance to be fixed.
         */
        function fixUncaughtExceptions (widget) {
            widget.dates.buggyParseInput = widget.dates.parseInput;
            widget.dates.parseInput = (input) => {
                try {
                    return widget.dates.buggyParseInput(input);
                }
                catch (err) {
                    widget.dates.clear();
                }
            };
        }

        // Date/Time popups can be closed by click on the toggle element or by Escape key
        document.addEventListener('keydown', function (event) {
            if (event.keyCode !== 27) return;
            [].forEach.call(document.querySelectorAll('[data-input-type]'), function (el) {
                const td = el._tempusDominus;
                if (td) {
                    td.hide();
                }
            });
        });

        @* Try to set the 'To' and 'Closing' dates when 'From' date changes *@
        document.getElementById('@Html.IdFor(m => m.DateFromText)').addEventListener('change', function () {
            const from = document.getElementById('@Html.IdFor(m => m.DateFromText)').parentElement._tempusDominus;
            const to = document.getElementById('@Html.IdFor(m => m.DateToText)').parentElement._tempusDominus;
            const closing = document.getElementById('@Html.IdFor(m => m.ClosingDateText)').parentElement._tempusDominus;
            if (from.dates.picked.length == 0)
            {
                to.dates.clear();
                closing.dates.clear();
                return;
            }
            to.dates.setValue(from.dates.picked[0], to.dates.lastPickedIndex);
            try {
                const dateFrom = from.dates.picked[0];
                let closingDate = dateFrom.clone.manipulate(-10, 'date'); // 10 days before
                const tomorrow = new tempusDominus.DateTime().manipulate(1, 'date');
                if (closingDate < tomorrow) {
                    closingDate = dateFrom.clone.manipulate(-1, 'date');
                }
                closing.dates.setValue(closingDate, closing.dates.lastPickedIndex);
            }
            catch {
                // no action
            }
        });

        // Modify number of males after changing the number of females
        document.getElementById('@Html.IdFor(m => m.MinMaxFemale)').addEventListener('change', function () {
            const minMaxMale = document.getElementById('@Html.IdFor(m => m.MinMaxMale)');
            switch (this.value) {
                case '0':
                    minMaxMale.value = 0;
                    break;
                case '1':
                    minMaxMale.value = 2;
                    break;
                case '2':
                    minMaxMale.value = 1;
                    break;
            }
        });

        // Modify number of females after changing the number of males
        document.getElementById('@Html.IdFor(m => m.MinMaxMale)').addEventListener('change', function () {
            const minMaxFemale = document.getElementById('@Html.IdFor(m => m.MinMaxFemale)');
            switch (this.value) {
                case '0':
                    minMaxFemale.value = 0;
                    break;
                case '1':
                    minMaxFemale.value = 2;
                    break;
                case '2':
                    minMaxFemale.value = 1;
                    break;
            }
        });
	};
    //]]>
    </script>
}
